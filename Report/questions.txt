*** Контрольные вопросы ***
 
*** Какие примитивные типы данных существуют в JavaScript? ***

Примитивные типы данных в JavaScript:

В JavaScript существуют следующие примитивные типы данных:
Number: для числовых значений, как с плавающей точкой, так и целых.
String: для строк текста, заключённых в одинарные или двойные кавычки.
Boolean: для логических значений true и false.
Undefined: для переменных, которым не было присвоено значение.
Null: для обозначения отсутствия значения.
BigInt: для работы с очень большими числами.
Symbol: для создания уникальных идентификаторов.
Эти типы являются основой для хранения данных в JavaScrip.

*** Какие методы массивов вы использовали для обработки и анализа данных в вашем приложении, и как они помогли в выполнении задачи? ***

В предоставленном коде были использованы следующие методы массивов для обработки и анализа данных:

forEach(): Этот метод был использован для перебора всех элементов массива транзакций и выполнения определенных действий для каждой транзакции. Например, в методах getUniqueTransactionType(), findMostTransactionsMonth(), findMostDebitTransactionMonth() и других, forEach() используется для обработки каждой транзакции и вычисления соответствующих данных.
filter(): Этот метод был использован для фильтрации массива транзакций на основе определенных условий. Например, в методах calculateTotalAmountByDate(), getTransactionsInDateRange(), getTransactionsByMerchant() и других, filter() используется для выбора только тех транзакций, которые соответствуют заданным критериям.
map(): Этот метод был использован для преобразования массива транзакций в массив определенных атрибутов транзакций. Например, в методе mapTransactionDescriptions(), map() используется для извлечения только описаний транзакций.
reduce(): Этот метод был использован для вычисления некоторых агрегированных данных на основе элементов массива. Например, в методах calculateTotalAmount(), calculateTotalAmountByDate(), calculateAverageTransactionAmount() и других, reduce() используется для вычисления общей суммы транзакций или других агрегированных данных.
Каждый из этих методов массива позволяет эффективно обрабатывать и анализировать данные транзакций, упрощая код и делая его более читаемым и поддерживаемым.

*** В чем состоит роль конструктора класса? ***

Конструктор класса в JavaScript играет ключевую роль в объектно-ориентированном программировании. Он используется для создания и инициализации объектов, созданных с помощью класса. Основные моменты, касающиеся конструктора:
Создание объекта: Конструктор автоматически вызывается при создании нового объекта с помощью ключевого слова new.
Инициализация свойств: В конструкторе задаются начальные значения свойств объекта.
Выполнение кода: В конструкторе можно выполнять любой код, необходимый для инициализации объекта.

*** Каким образом вы можете создать новый экземпляр класса в JavaScript? ***

Чтобы создать новый экземпляр класса в JavaScript, используется ключевое слово new, за которым следует вызов конструктора класса. Пример создания экземпляра класса User:

class User {
  constructor(name) {
    this.name = name;
  }

  greet() {
    console.log(`Привет, меня зовут ${this.name}`);
  }
}

// Создание нового экземпляра класса User с именем "Никита"
const user = new User('Никита');

// Вызов метода greet для нового объекта
user.greet(); // Вывод: Привет, меня зовут Никита

В этом примере, new User('Никита') создаёт новый объект с именем Алексей, и метод greet выводит приветствие с именем пользователя.
